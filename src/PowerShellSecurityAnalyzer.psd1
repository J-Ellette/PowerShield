#
# Module manifest for module 'PowerShellSecurityAnalyzer'
#
# Generated by: PowerShield Project
#
# Generated on: 10/26/2025
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'PowerShellSecurityAnalyzer.psm1'

# Version number of this module.
ModuleVersion = '2.0.0'

# Supported PSEditions
CompatiblePSEditions = @('Core')

# ID used to uniquely identify this module
GUID = '7f3f1d74-ab1c-4d15-a7a0-dc90a655c740'

# Author of this module
Author = 'PowerShield Project'

# Company or vendor of this module
CompanyName = 'PowerShield Security Suite'

# Copyright statement for this module
Copyright = '(c) 2025 PowerShield Project. All rights reserved.'

# Description of the functionality provided by this module
Description = 'PowerShield PowerShell Security Analyzer - Comprehensive security analysis for PowerShell scripts with 52+ security rules, AI-powered auto-fix, and enterprise compliance features. Detects vulnerabilities including insecure hash algorithms, credential exposure, command injection, and advanced attack patterns mapped to MITRE ATT&CK framework.'

# Minimum version of the PowerShell engine required by this module
PowerShellVersion = '7.0'

# Name of the PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# ClrVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @(
    'New-SecurityAnalyzer',
    'Invoke-SecurityAnalysis', 
    'Invoke-WorkspaceAnalysis'
)

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = @()

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @()

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
FileList = @(
    'PowerShellSecurityAnalyzer.psm1',
    'PowerShellSecurityAnalyzer.psd1'
)

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = @(
            'Security',
            'PowerShell',
            'Static-Analysis',
            'Vulnerability-Detection',
            'DevSecOps',
            'SAST',
            'Security-Scanner',
            'Compliance',
            'MITRE-ATTACK',
            'Code-Analysis',
            'Enterprise',
            'CI-CD',
            'GitHub-Actions',
            'SARIF',
            'Auto-Fix',
            'AI-Powered'
        )

        # A URL to the license for this module.
        LicenseUri = 'https://github.com/J-Ellette/PowerShield/blob/main/LICENSE'

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/J-Ellette/PowerShield'

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        ReleaseNotes = @'
# PowerShield v2.0.0 Release Notes

## Phase 2 Complete: VS Code Extension with AI Integration

### New Features
- **Real-time Security Analysis**: Live analysis as you type with configurable debouncing
- **Multi-Provider AI Support**: GitHub Models, OpenAI GPT-4, Anthropic Claude, Azure OpenAI
- **Interactive VS Code Integration**: Problems panel, hover explanations, security tree view
- **Performance Optimization**: 100MB configurable cache with intelligent cleanup
- **Enhanced Developer Experience**: One-click fixes, educational content, command integration

### Security Rules (52 Total)
- **Core Rules (4)**: Hash algorithms, credentials, injection, certificates
- **PowerShell-Specific (16)**: Execution policy, remoting, version downgrades, privilege escalation
- **Network Security (3)**: HTTP/TLS validation, hardcoded URLs
- **File System (4)**: Path traversal, permissions, temp files
- **Registry (3)**: Dangerous modifications, credential storage
- **Data Security (4)**: SQL/LDAP injection, XML security, log injection
- **Evasion Detection (3)**: AMSI/ETW bypass attempts
- **Azure Cloud (11)**: Credential leaks, resource exposure, compliance
- **Advanced Attacks (6)**: Obfuscation, download cradles, persistence, lateral movement

### Enterprise Features
- **52 Security Rules** with MITRE ATT&CK mapping
- **Custom Rule Marketplace** with YAML-based definitions
- **Baseline & Compliance Reporting** (NIST, CIS, OWASP, SOC 2, PCI-DSS, HIPAA)
- **CLI Tools** for analysis, baselines, compliance, and pre-commit hooks
- **AI Auto-Fix** with confidence scoring and multiple providers
- **Configuration System** with hierarchical YAML support
- **Suppression Management** with expiry dates and justification tracking
- **Enterprise Migration Toolkit** with ROI calculator and adoption playbook

### Installation
```bash
# VS Code Extension (Phase 2)
git clone https://github.com/J-Ellette/PowerShield.git
cd PowerShield/vscode-extension
npm install && npm run compile
# Press F5 to launch Extension Development Host

# GitHub Actions Integration (Phase 1)
# Add .github/workflows/powershield-security.yml to your repository
```

### Breaking Changes
None - Fully backward compatible with v1.x configurations.

### Documentation
- Complete VS Code Extension Guide: vscode-extension/README.md
- CLI Usage Guide: docs/CLI_USAGE_GUIDE.md
- Enterprise Adoption Playbook: docs/ENTERPRISE_ADOPTION_PLAYBOOK.md
- Migration Guide: docs/MIGRATION_GUIDE.md
'@

        # Prerelease string of this module
        # Prerelease = ''

        # Flag to indicate whether the module requires explicit user acceptance for install/update/save
        RequireLicenseAcceptance = $false

        # External dependent modules of this module
        ExternalModuleDependencies = @()

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
HelpInfoURI = 'https://github.com/J-Ellette/PowerShield/wiki'

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}